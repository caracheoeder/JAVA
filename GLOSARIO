GLOSARIO

¿Por qué usar JDK?
Estas son las principales razones para usar JDK:

-JDK contiene las herramientas necesarias para escribir programas Java para ejecutarlos.

-Incluye compilador, lanzador de aplicaciones Java, Appletviewer, etc.

-El compilador convierte el código escrito en Java en código de bytes.

JAVA VIRTUAL MACHINE JVM


● Máquina Virtual Java (JVM). Java Virtual Machine (JVM) es un motor que proporciona un entorno de tiempo de ejecución para controlar el 
código Java o las aplicaciones. Convierte el código de bytes de Java en lenguaje de máquina. 
JVM es una parte de Java Run Environment (JRE). En otros lenguajes de programación, el compilador produce código de máquina para un sistema en particular. 
Sin embargo, el compilador de Java produce código para una máquina virtual conocida como máquina virtual de Java.

JAVA RUN TIME ENVIRONMENT JRE

● Entorno de tiempo de ejecución de Java (JRE). JRE es una pieza de software que está diseñada para ejecutar otro software. 
Contiene las bibliotecas de clases, la clase de cargador y la JVM. 
En términos simples, si deseas ejecutar un programa Java, necesitas JRE. Si no eres programador, no necesitas instalar JDK, solo JRE para ejecutar programas Java.

PLATAFORMAS DE JAVA

● Plataforma Java, edición estándar (Java SE): la API de Java SE ofrece la
funcionalidad principal del lenguaje de programación Java. Define toda la base de
tipo y objeto para clases de alto nivel. Se utiliza para redes, seguridad, acceso a
bases de datos, desarrollo de interfaz gráfica de usuario (GUI) y análisis XML.

● Java Platform, Enterprise Edition (Java EE): la plataforma Java EE ofrece una
API y un entorno de tiempo de ejecución para desarrollar y ejecutar aplicaciones
de red altamente escalables, a gran escala, de múltiples niveles, confiables y
seguras.

● Plataforma de lenguaje de programación Java, Micro Edition (Java ME): la
plataforma Java ME ofrece una API y una máquina virtual de tamaño reducido
que ejecuta aplicaciones del lenguaje de programación Java en dispositivos
pequeños, como teléfonos móviles.

● Java FX: JavaFX es una plataforma para desarrollar aplicaciones ricas de Internet
utilizando una API de interfaz de usuario liviana. Usa motores gráficos y de medios
acelerados por hardware que ayudan a Java a aprovechar los clientes de mayor
rendimiento y una apariencia moderna y API de alto nivel para conectarse a
fuentes de datos en red.

Java se ejecuta en diferentes plataformas, pero los programadores lo escriben de la
misma manera. Los archivos Java tienen una extensión .java. ¡Algunos programas son un
solo archivo, otros son cientos de archivos!


EN JAVA PRIMERO SE DECLARAN VARIABLES, SE TIENE QUE DECIR EL TIPO EJEMPLO:

int velocidadLimite;
velocidadLimite = 80;

ES UN LENGUAJE ESTATICO, UNA VEZ QUE SE DECLARAN LAS VARIABLES NO SE PUEDEN CAMBIAR.

EJEMPLO (NO SE PUEDE)

int velocidadLimite;
... ... ...
float velocidadLimite;

----JAVA DISTINGUE ENTRE MAYUSCULAS Y MINUSCULAS.

LAS VARIABLES NO PUEDEN INICIAR CON NUMERO

int 1edad; // variable inválida



EJEMPLO:

int edad; // nombre válido y buena práctica
int _edad; // válido pero mala práctica
int $edad; // válido pero mala práctica

Hay tres tipos de variables en Java:

1. Variable local. Una variable declarada dentro del cuerpo de un método (method)
se llama variable local. Puedes usar esta variable solo dentro de ese método y los
otros métodos en la clase (class) ni siquiera sabrán que la variable existe.
Una variable local no se puede definir con la palabra clave "static".

2. Variable de instancia. Una variable declarada dentro de la clase (class) pero fuera
del cuerpo de un método (method) se denomina variable de instancia. No se
declara como estático. Se denomina variable de instancia porque su valor es
específico de la instancia y no se comparte entre instancias.

3. Variable estática. Una variable que se declara como static se denomina variable
estática. No puede ser local. Puedes crear una sola copia de la variable estática y
compartirla entre todas las instancias de la clase. La asignación de memoria para
variables estáticas ocurre solo una vez cuando la clase se carga en la memoria.

Ejemplo.

    class Ejemplo {
    static int a = 1; // variable estática
    int data = 99; // variable de instancia
    void method() {
    int b = 90; // variable local
    }
    }
    
    ## TIPOS DE DATOS

Tipos de datos en Java

Como sugiere el nombre, los tipos de datos especifican el tipo de datos que se pueden
almacenar dentro de las variables en Java. Hay dos grupos de tipos datos en Java:

● Tipos de datos primitivos: incluye int, double, boolean, char, byte, short, long y
float

● Tipos de datos no primitivos: como String, Arrays y Classes.

Los tipos de datos primitivos están predefinidos y disponibles en el lenguaje Java. Los
valores primitivos no comparten estado con otros valores primitivos.

### Tipo de dato int
El primer tipo de datos que almacenaremos es el número entero. Los números enteros
son muy comunes en la programación. A menudo los ves usados para almacenar
edades, o tamaños máximos, o la cantidad de veces que se ha ejecutado algún código,
entre muchos otros usos.

En Java, los números enteros se almacenan en el tipo de datos primitivo int.

● ints contienen números positivos, números negativos y cero. No almacenan
fracciones o números con decimales en ellos.

● El tipo de datos int Almacena números enteros desde -2,147,483,648 hasta
2,147,483,647

● El valor por default de int es 0.

Para declarar una variable de tipo int, usamos la palabra clave int antes del nombre de
la variable:

        // int variable declaración
        int fechaCreacionJava;
        // Asignación
        fechaCreacionJava = 1996;
        // Declaración y asignación
        int numeroTiposPrimitivos = 8;
        
###Tipo de dato double
Los números enteros no cumplen con lo que necesitamos para cada programa. ¿Y si
quisiéramos almacenar el precio de algo? Necesitamos un punto decimal. ¿Y si
quisiéramos almacenar la población mundial? Ese número sería mayor de lo que puede
contener el tipo int.

El tipo de datos primitivo double puede ayudar.

● double puede contener decimales, así como números muy grandes y muy
pequeños.

● El tipo de datos double es un punto flotante de precisión doble de 64 bits.

● El valor por default de double es 0.0d
Para declarar una variable de tipo double, usamos la palabra clave double en la
declaración:

    // los doubles pueden tener decimales:
    double precio = 8.99;
    // los doubles pueden tener valores mayores que los que podría contener un int:
    double pib = 1 285 518 000;
    
### Tipo de dato boolean
A menudo, nuestros programas enfrentan preguntas que solo pueden responderse con
un sí o un no.

¿Está encendido el horno? ¿La luz es verde? ¿Comí el desayuno?
Estas preguntas se responden con un boolean, un tipo de dato que hace referencia a uno
de los siguientes dos valores: verdadero (true) o falso (false).

Declaramos variables booleanas usando la palabra clave boolean antes del nombre de
la variable.

    boolean javaEsUnLenguajeCompilado = true;
    boolean javaEsUnaTazaDeCafe = false;
    
 ● El valor por default de boolean es false.

● El tipo de datos booleano especifica un bit de información, pero su "tamaño" no se
puede definir con precisión.

### Tipo de dato char
¿Cómo respondemos preguntas como: ¿Cuál es la respuesta correcta, a, b, c, o d? ¿Con
qué letra empieza tu nombre?

El tipo de datos char puede contener cualquier carácter, como una letra, un espacio o un
signo de puntuación.

● Debe estar entre comillas simples, '.

● Es un carácter Unicode de 16 bits.

● Su valor por default es ‘\u0000’ (Java usa el sistema Unicode, no el sistema de
código ASCII. El \u0000 es el rango más bajo del sistema Unicode.).

Por ejemplo:

    char respuesta = 'a';
    char primeraLetra = 'p';
    char signo = '!';
    
### Tipo de dato String
El tipo de datos String se utiliza para almacenar una secuencia de caracteres (texto). Los
valores de String (cadena) deben estar entre comillas dobles. Las cadenas (String) en
Java no son tipos primitivos, sino objetos. Ya hemos visto ejemplos de String, por
ejemplo, cuando imprimimos "¡Hola Mundo!".

    String saludo = "¡Hola Mundo!";
    System.out.println(saludo);


###OPERADORES###

Los operadores son símbolos que realizan operaciones sobre variables y valores. Por
ejemplo, + es un operador que se usa para sumar, mientras que * también es un
operador que se usa para multiplicar.

Los operadores en Java se pueden clasificar en 5 tipos:

1. Operadores aritméticos
2. Operadores de Asignación
3. Operadores relacionales
4. Operadores lógicos
5. Operadores unarios
